<?php

/**
 * @file
 * Holds additional (experimental) stuff for paragraphs.
 */

/**
 * Implements hook_theme().
 */
function paragraphs_extra_theme() {
  return array(
    'paragraphs_widget_item' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_library().
 */
function paragraphs_extra_library() {
  $libraries = array();
  $libraries['paragraphs.summary'] = array(
    'title' => 'Paragraphs summary',
    'version' => '0.1',
    'js' => array(
      drupal_get_path('module', 'paragraphs_extra') . '/js/paragraphs.summary.js' => array(),
    ),
    'css' => array(
    ),
  );
  return $libraries;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function paragraphs_extra_field_widget_form_alter(&$element, &$form_state, $context) {
  // Add additional libraries and rendering to the paragraphs_embed widget.
  if ($context['instance']['widget']['type'] == 'paragraphs_embed') {
    $element['#attached']['library'][] = array('system', 'drupal.collapse');
    $element['#attached']['library'][] = array('paragraphs_extra', 'paragraphs.summary');

    foreach (element_children($element) as $key) {
      // Provide the theme function onyl for delta (not add_more, ...).
      if (is_numeric($key)) {
        $element[$key]['#theme'] = 'paragraphs_widget_item';
      }
    }
  }
}

/**
 * Renders the paragraph item in the widget form.
 */
function theme_paragraphs_widget_item($vars) {
  $element =& $vars['element'];
  $body = '';

  // Grab the title and the rest as body from the nested elements.
  $paragraph_bundle = paragraphs_bundle_load($element['#bundle']);
  $title = "{$paragraph_bundle->name}";

  foreach (element_children($element) as $key) {
    if ($key !== 'title') {
      $body .= drupal_render($element[$key]);
    }
  }

  $item_attributes = array(
    'class' => array(
      'paragraphs-widget-item',
      'delta-' . $element['#delta'],
      'collapsible',
      'collapsed',
    ),
  );

  $ptitle = '';
  if (!isset($element['#entity']->item_id)) {
    $item_attributes['class'] = 'is-new';
  }
  else {
    if (isset($element['#entity']->field_title)) {
      $paragraph_title = field_get_items('paragraphs_item', $element['#entity'], 'field_title');
      $ptitle = "{$paragraph_title[0]['value']} - ";
    }
  }
  $output = '
  <fieldset'. drupal_attributes($item_attributes) . '>
    <legend class="paragraphs-widget-item-title">
      <span class="fieldset-legend">' . $ptitle . $title . '</span>
    </legend>
    <div class="fieldset-wrapper">
      <div class="paragraphs-widget-item-summary"></div>
      <div class="paragraphs-widget-item-body">' . $body . '</div>
    </div>
  </fieldset>';

  return $output;
}
